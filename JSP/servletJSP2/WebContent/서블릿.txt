서블릿.txt

Servlet(서블릿) : HTML코드 방식의 한계를 개선하기 위해서 (동적데이터 처리)	
				> 웹서버에서 실행되는 자바 클래스 파일(Server Side Applet)
				
				> JSP : 서블릿 코드를 실행 처리
				 	=> JSP파일을 서블릿 형태로 변경 - 클라이언트 요청 실행
				 	
p27~
서블릿의 동작 원리
1)사용자 URL을 요청(web.xml-배포서술자를 사용해서 특정주소와 클래스를 연결) 
2)웹 컨테이너가 필요한 정보 request,response를 생성
3)서블릿 인스턴스와 스레드 생성(init()- 서블릿당 1번씩만 초기화해서 사용가능하다)
4)service() 메서드 호출 & 서블릿 클래스 실행 (doGet()/ dopost() 실행)
doGet() 주소가 get방식 전달/ dopost() 주소가 post방식 전달
5) 응답처리 & 스레드 소멸 (destroy 메소드 호출)

2~5과정은 컨테이너(톰캣)이 처리

두번째 서블릿 실행시 , init다음 단계로 바로 건너뛴다.  4번 순서로 간다

p67~ 서블릿 라이프 사이클(서블릿 객체의 생성 소멸 관계)

p143~ 서블릿에서 특정 페이지로 포워딩하는 방식 
		> dispatcher , redirect
		
*서블릿 생성 규칙
1) javax.servlet.Servlet 인터페이스를 구현(implements)해야함
2) 1번 동작을 수행하기 어렵다면, javax.servlet.http.HttpServlet을 상속해야함. (일반적으로 상속을 많이 함)
3) doGet/doPost메서드를 오버라이딩한다. 전달인자를 구현
	javax.servlet.http.HttpServletRequest,
	javax.servlet.http.HttpServletResponse 를 반드시 구현해야한다.
	
4) java.io.IOExeption, javax.servlet.ServletExeption 예외처리 필요.
5) web.xml을 통한 서블릿 매핑(URL 매핑)

상속 > 오버라이딩 > 매핑

서블릿을 사용하면 jsp페이지의 부담을 덜어줄 수 있음(boardDAO처럼 메서드 만들어 놓고 jsp페이지에서 호출해서 사용하는 방식처럼 사용한다)


*서블릿 생성 > 사용
[최초 실행]
1. 클라이언트 url요청
2. 웹 컨테이너(톰캣) 호출 > 서블릿 객체 생성
3. init() 실행 (초기화)
4. service(), doGet/dopost() 실행
5. 서블릿에서 응답 결과를  WAS에 전달
6. 클라이언트에게 전달


[이후 실행]
1. 클라이언트 url요청
2. 웹 컨테이너(톰캣) 호출 > 서블릿 객체 생성
3. service(), doGet/dopost() 실행
4. 서블릿에서 응답 결과를  WAS에 전달
5. 클라이언트에게 전달


서블릿 파일 저장경로
D:\workspace_jsp2\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost

* JSP > Servlet 변경 규칙
1) jsp 페이지는 클라이언트 요청이 최초 발생시 서블릿으로 변경된다.
2) 스크립틀릿(<%%>)은 서블릿-service()메서드에 작성된다.
3) 표현식(<%=%>)은 서블릿-service()메서드 안에서 out.println()변환
4) 선언문(<%!%>)은 서블릿의 멤버변수/메서드 변환
5) HTML코드는 서블릿 - service()메서드 안에서  out.write() 변환


